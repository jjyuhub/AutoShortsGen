name: YouTube API One-Time Setup
on:
  workflow_dispatch:
    inputs:
      auth_code:
        description: 'Authorization code from the OAuth flow'
        required: true
        type: string

jobs:
  generate-refresh-token:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2
      
      - name: Create Client Secret File
        env:
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
        run: |
          echo "$CLIENT_SECRET_JSON" > client_secret.json
      
      - name: Create Token Generator Script
        run: |
          tee generate_token.py > /dev/null << 'EOL'
#!/usr/bin/env python3
import os
import json
import sys
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request

# Get the auth code from the workflow input
auth_code = os.environ.get("AUTH_CODE")
if not auth_code:
    print("::error::No authorization code provided. Please run the workflow with an auth code.")
    sys.exit(1)

# Load client secrets
with open("client_secret.json", "r") as f:
    client_config = json.load(f)

# Create a flow instance
flow = Flow.from_client_config(
    client_config,
    scopes=["https://www.googleapis.com/auth/youtube.upload"],
    redirect_uri="urn:ietf:wg:oauth:2.0:oob"
)

# Exchange auth code for credentials
try:
    flow.fetch_token(code=auth_code)
    credentials = flow.credentials
    
    # Output the refresh token
    with open("refresh_token.txt", "w") as f:
        f.write(credentials.refresh_token)
    
    print("\n========== YOUR REFRESH TOKEN ==========")
    print(credentials.refresh_token)
    print("========================================\n")
    print("Add this as a GitHub secret named YOUTUBE_REFRESH_TOKEN")
    
except Exception as e:
    print(f"::error::Failed to exchange authorization code for tokens: {str(e)}")
    sys.exit(1)
EOL
      
      - name: Generate Refresh Token
        id: token
        env:
          AUTH_CODE: ${{ github.event.inputs.auth_code }}
        run: |
          python generate_token.py
          echo "refresh_token=$(cat refresh_token.txt)" >> $GITHUB_OUTPUT
      
      - name: Instructions for Setting up Secrets
        run: |
          echo "âœ… Refresh Token Generated Successfully!"
          echo "---------------------------------------------"
          echo "Your refresh token is: ${{ steps.token.outputs.refresh_token }}"
          echo "---------------------------------------------"
          echo "Instructions:"
          echo "1. Go to your repository's Settings > Secrets and variables > Actions"
          echo "2. Add a new repository secret named 'YOUTUBE_REFRESH_TOKEN'"
          echo "3. Paste the refresh token as the value"
          echo "4. The main workflow can now authenticate with YouTube automatically"
