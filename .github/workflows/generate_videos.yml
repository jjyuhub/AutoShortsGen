name: Generate and Upload Repurposed Videos
on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12 PM UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-videos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak-ng
          pip install google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2

      - name: Generate Videos
        run: |
          chmod +x generate_videos.sh
          ./generate_videos.sh
      
      - name: Upload Generated Videos (Artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: generated-videos
          path: videos/generated/
      
      - name: Create Client Secret File
        env:
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}
        run: |
          echo "$CLIENT_SECRET_JSON" > client_secret.json
          
      - name: Upload to YouTube
        run: |
          python -c '
import os
import glob
import json
import googleapiclient.discovery
import googleapiclient.errors
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account

def upload_to_youtube():
    # Get client secrets from the environment
    client_secret_path = "client_secret.json"
    
    # Create service account credentials
    # Note: For YouTube API with service accounts, you need to set up domain-wide delegation
    # See: https://developers.google.com/identity/protocols/oauth2/service-account#delegatingauthority
    
    # Alternative approach - Use API key for YouTube Data API
    # This only works for public data, not uploads
    # Let\'s use a JWT approach instead
    
    # Since we\'re in a GitHub Action, we\'ll use the provided client secret
    # We\'ll use the JWT auth flow with the client_id and client_secret
    
    # Load the client secret
    with open(client_secret_path, "r") as f:
        client_info = json.load(f)
    
    client_id = client_info["web"]["client_id"]
    client_secret = client_info["web"]["client_secret"]
    
    # For YouTube uploads without user consent flow, we need to use a service account with domain-wide delegation
    # This requires GSuite/Workspace and admin setup
    # In this GitHub Action context, we\'ll use a pre-authorized refresh token approach
    
    # The secret YOUTUBE_REFRESH_TOKEN should be set in GitHub secrets
    refresh_token = os.environ.get("YOUTUBE_REFRESH_TOKEN")
    
    # If we have a refresh token, we can proceed with the upload
    if not refresh_token:
        print("⚠️ No YOUTUBE_REFRESH_TOKEN found in environment variables!")
        print("Please follow these steps to set up the refresh token:")
        print("1. Go to https://console.cloud.google.com/apis/credentials")
        print("2. Create an OAuth consent screen configuration")
        print("3. Create an OAuth client ID for a Desktop application")
        print("4. Run a local script to get the refresh token using user authentication")
        print("5. Add the refresh token as a GitHub secret named YOUTUBE_REFRESH_TOKEN")
        return
    
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from google.auth.transport.requests import Request
    
    # Create credentials using the refresh token
    credentials = Credentials(
        None,  # No access token initially
        refresh_token=refresh_token,
        token_uri="https://oauth2.googleapis.com/token",
        client_id=client_id,
        client_secret=client_secret,
        scopes=["https://www.googleapis.com/auth/youtube.upload"]
    )
    
    # Refresh the access token
    credentials.refresh(Request())
    
    # Create the YouTube API client
    youtube = googleapiclient.discovery.build("youtube", "v3", credentials=credentials)
    
    # Find videos to upload
    video_files = glob.glob("videos/generated/*.mp4")
    if not video_files:
        print("No video files found to upload!")
        return
    
    # Upload each video
    for video_file in video_files:
        try:
            video_title = os.path.basename(video_file).split(".")[0]
            
            # Prepare the request body
            body = {
                "snippet": {
                    "title": video_title,
                    "description": f"Video automatically generated and uploaded by GitHub Actions: {video_title}",
                    "tags": ["automated", "github-actions"],
                    "categoryId": "22"  # People & Blogs category
                },
                "status": {
                    "privacyStatus": "unlisted",
                    "selfDeclaredMadeForKids": False
                }
            }
            
            # Create the upload request
            media = MediaFileUpload(video_file, chunksize=1024*1024, resumable=True)
            request = youtube.videos().insert(
                part=",".join(body.keys()),
                body=body,
                media_body=media
            )
            
            # Execute the upload in chunks
            print(f"Uploading {video_file}...")
            response = None
            while response is None:
                status, response = request.next_chunk()
                if status:
                    print(f"Uploaded {int(status.progress() * 100)}%")
            
            print(f"Upload complete! Video ID: {response[\'id\']}")
            
        except Exception as e:
            print(f"Error uploading {video_file}: {str(e)}")

# Call the function
upload_to_youtube()
          '
        env:
          YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
